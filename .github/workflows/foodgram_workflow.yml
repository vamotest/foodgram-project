name: foodgram_workflow

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        pip3 install flake8
    - name: Lint with flake8
      run: |
        flake8 .
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest

  deploy:
   runs-on: ubuntu-latest
   needs: build_and_push_to_docker_hub
   steps:

   - name: Set environment variables
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         FILE=.env
         if [ -f "$FILE" ]
         then
           echo "$FILE exists and will removed"
           rm $FILE
         else
           echo "$FILE does not exist"
         fi
         echo "Add new $FILE"
         touch $FILE
         echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> $FILE
         echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> $FILE
         echo DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }} >> $FILE
         echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> $FILE
         echo DB_NAME=${{ secrets.DB_NAME }} >> .env
         echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> $FILE
         echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> $FILE
         echo DB_HOST=${{ secrets.DB_HOST }} >> $FILE
         echo DB_PORT=${{ secrets.DB_PORT }} >> $FILE
   - name: Check is docker install
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       port: ${{ secrets.CLOUD_PORT }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         if sudo service docker status > /dev/null 2>&1
         then
             sudo apt-get update && sudo apt-get upgrade docker-ce -y
         else
             curl -fsSL https://get.docker.com -o get-docker.sh > /dev/null 2>&1
             sh get-docker.sh
         fi
   - name: Compose up
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       port: ${{ secrets.CLOUD_PORT }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}

       script: |
         sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest
         id=$(docker create ${{ secrets.DOCKER_USERNAME }}/${{ secrets.PROJECT_NAME }}:latest)
         FILE=docker-compose.yml
         if [ -f "$FILE" ]
         then
             echo "$FILE exists and will removed"
             rm $FILE
         else
             echo "$FILE does not exist"
         fi
         echo "Add new $FILE"
         docker cp $id:/usr/src/web/$FILE $FILE
         sudo docker rm -v $id
         sudo docker stop $(sudo docker ps -a -q) > /dev/null 2>&1
         sudo docker kill $(sudo docker ps -a -q) > /dev/null 2>&1
         sudo docker-compose up -d --force-recreate
   - name: Prepare django
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       port: ${{ secrets.CLOUD_PORT }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         docker-compose exec -T web python3 manage.py collectstatic --noinput
         docker-compose exec -T web python3 manage.py migrate --noinput
         docker-compose exec -T web python3 manage.py loaddata fixture.json
   - name: Clean up
     uses: appleboy/ssh-action@master
     with:
       host: ${{ secrets.CLOUD_HOST }}
       username: ${{ secrets.CLOUD_USER }}
       port: ${{ secrets.CLOUD_PORT }}
       key: ${{ secrets.SSH_KEY }}
       passphrase: ${{ secrets.PASSPHRASE }}
       script: |
         sudo docker rmi $(docker images -q -f dangling=true) > /dev/null 2>&1
         sudo docker volume rm $(docker volume ls -qf dangling=true) > /dev/null 2>&1
         sudo docker system prune -f > /dev/null 2>&1
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!